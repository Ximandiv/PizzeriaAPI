services:
  # ASP.NET application container
  webapp:
    image: pizzeriaapi-server:latest # The name of your app's image
    build: .
    ports:
      - "5283:8080"  # Expose the app's port
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - my_secret=${MY_SECRET}
      - MongoDB__ConnectionString=${MY_SECRET_MONGODB}
      - MongoDB__Database=${MY_SECRET_MONGODB_DB}
      - MongoDB__Collection=${MY_SECRET_MONGODB_COLLECTION}
      - JwtSettings__SecretKey=${MY_SECRET_JWT_KEY}
      - JwtSettings__Issuer=${MY_SECRET_JWT_ISSUER}
      - JwtSettings__Audience=${MY_SECRET_JWT_AUDIENCE}
      - JwtSettings__ExpirationInMinutes=${MY_SECRET_JWT_EXPIRATIONINMINUTES}
    depends_on:
        mydb:
          condition: service_healthy
        mongodb:
          condition: service_healthy

  mydb:
    image: mysql:8.0  # MySQL Docker image
    environment:
      - MYSQL_ROOT_PASSWORD=${MY_SECRET_PASSWORD}
      - MYSQL_DATABASE=${MY_SECRET_DB}
      - MYSQL_USER=${MY_SECRET_USER}
      - MYSQL_PASSWORD=${MY_SECRET_PASSWORD}
    ports:
      - "3307:3306"  # Expose MySQL port
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
        test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
        interval: 30s
        retries: 5
        start_period: 30s
        timeout: 10s
  
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MY_SECRET_MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MY_SECRET_MONGODB_PASSWORD}
      - MONGO_INITDB_DATABASE=${MY_SECRET_MONGODB_DB}
    volumes:
      - mongo-data:/data/db
    ports:
      - "27018:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

volumes:
  mysql-data:
  mongo-data:
    driver: local